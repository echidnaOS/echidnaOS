org 0x1000
bits 16

cli
cld

xor ax, ax
mov ds, ax

; set the flag
mov byte [0x510], 1

jmp 0x0:fix_cs
fix_cs:
mov es, ax
mov fs, ax
mov gs, ax
mov ss, ax

mov esp, dword [0x550]

lgdt [0x580]
lidt [0x590]

mov edx, dword [0x540]
mov cr3, edx

mov eax, 10100000b
mov cr4, eax

mov ecx, 0xc0000080
rdmsr

or eax, 0x00000100
wrmsr

mov eax, cr0
or eax, 0x80000001
and eax, ~(0x60000000)
mov cr0, eax

jmp 0x08:.mode64
.mode64:
bits 64
mov ax, 0x10
mov ds, ax
mov es, ax
mov ss, ax
mov ax, 0x23
mov fs, ax
mov gs, ax

; enable SSE
mov rax, cr0
and al, 0xfb
or al, 0x02
mov cr0, rax
mov rax, cr4
or ax, 3 << 9
mov cr4, rax

; Load FS with the CPU local struct base address
mov rcx, 0xc0000100
mov rax, qword [0x560]
xor rdx, rdx
wrmsr

mov ax, 0x38        ; load the TSS
ltr ax

; jump to entry point
mov rbx, qword [0x520]
call rbx
